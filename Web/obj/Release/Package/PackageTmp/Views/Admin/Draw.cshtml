@{
    ViewBag.Title = "Draw";
}

	<canvas style="position:relative;border:solid black 1px;" height="768" width="1024">Your browser cannot view this page.</canvas><br />
	<input id="btnGreen" type="button" value="Green" accesskey="g" />
	<input id="btnRed" type="button" value="Red" />
	<input id="btnBlue" type="button" value="Blue" />
	<input id="btnBlack" type="button" value="Black" />
	<input id="range" type="range" min="1" max="10" value="1" style="display:none;" />
	<input id="btnClear" type="button" value="Clear Canvas" />
	<input id="btnImage" type="button" value="Load Image" />
	<input id="btnSave" type="button" value="Save?" />

@section scripts
{
	<script type="text/javascript">
		var x, y;
		var context;
		var started;
		var textstart;

		$(function ()
		{
			context = $('canvas')[0].getContext("2d");
			context.lineCap = "round";
			context.lineJoin = "round";
			context.strokeStyle = "#000";
			context.stroke();

			$('canvas').mousemove(function (ev)
			{
				if (ev.layerX || ev.layerX == 0)
				{ // Firefox
					x = ev.layerX;
					y = ev.layerY;
				}
				else if (ev.offsetX || ev.offsetX == 0)
				{ // Opera
					x = ev.offsetX;
					y = ev.offsetY;
				}

				if (!started)
				{
					context.moveTo(x, y);
					context.beginPath();
				}
				else
				{
					context.lineTo(x, y);
					context.stroke();
				}
			});

			$('canvas').mousedown(function (ev)
			{
				if (ev.layerX || ev.layerX == 0)
				{ // Firefox
					x = ev.layerX;
					y = ev.layerY;
				} else if (ev.offsetX || ev.offsetX == 0)
				{ // Opera
					x = ev.offsetX;
					y = ev.offsetY;
				}

				if (textstart)
				{
					context.fillText("joriN", x, y);
					textstart = false;
				}
				else
				{
					context.beginPath();
					context.moveTo(x, y);
					started = true;
				}
			});

			$('canvas').mouseup(function ()
			{
				started = false;
				context.save();
			});

			$("#btnGreen").click(function ()
			{
				context.lineWidth = 5;
				context.strokeStyle = "rgba(0,255,0,0.5)";
			});

			$("#btnRed").click(function ()
			{
				context.lineWidth = 10;
				context.strokeStyle = "rgba(255,0,0,0.5)";
			});

			$("#btnBlue").click(function ()
			{
				context.lineWidth = 15;
				context.strokeStyle = "rgba(0,0,255,0.5)";
			});

			$("#btnBlack").click(function ()
			{
				context.lineWidth = 5;
				context.strokeStyle = "rgba(0,0,0,0.5)";
			});

			$("#btnClear").click(function ()
			{

				context.save();
				context.fillStyle = "#FFF";
				context.fillRect(0, 0, 1024, 768);
			});

			$("#range").change(function ()
			{
				context.lineWidth = $(this).val();
			});

			$(window).keyup(function (ev)
			{
				if (ev.keyCode == 49)
				{
					$("#btnGreen").click();
				}
				else if (ev.keyCode == 50)
				{
					$("#btnRed").click();
				}
				else if (ev.keyCode == 51)
				{
					$("#btnBlue").click();
				}
				else if (ev.keyCode == 52)
				{
					$("#btnBlack").click();
				}
				else if (ev.keyCode == 8)
				{
					context.restore();
				}
				else if (ev.keyCode == 84)
				{
					textstart = true;
				}
			});

			$(window).keydown(function (ev)
			{
				if (ev.keyCode == 8)
				{
					ev.preventDefault();
				}
			});

			$("#btnImage").click(function ()
			{
				context.save();
				var chart = new Image();
				chart.src = "/WebUI/Content/brainsoul.jpg";
				chart.onload = function ()
				{
					context.globalAlpha = 0.5;
					context.drawImage(chart, 0, 0);
				};
			});

			$("#btnSave").click(function ()
			{
				var data = context.getImageData(0, 0, 1024, 768);
				SaveToDisk("C:\test.png", data);
			});


		});

		function SaveToDisk(filepath, content)
		{
			try
			{
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			} catch (e)
			{
				alert("Permission to save file was denied.");
			}
			var file = Components.classes["@@mozilla.org/file/local;1"]
			.createInstance(Components.interfaces.nsILocalFile);
			file.initWithPath(filepath);
			if (file.exists() == false)
			{
				file.create(Components.interfaces.nsIFile.NORMAL_FILE_TYPE, 420);
			}
			var outputStream = Components.classes["@@mozilla.org/network/file-output-stream;1"]
			.createInstance(Components.interfaces.nsIFileOutputStream);

			outputStream.init(file, 0x04 | 0x08 | 0x20, 420, 0);
			var output = content;
			var result = outputStream.write(output, output.length);
			outputStream.close();
		}

	</script>
}
