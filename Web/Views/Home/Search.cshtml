@model SearchView
@{
	ViewBag.Title = "Search";
	ViewBag.NavHome = true;
	ViewBag.SearchQuery = Model.OriginalQuery;
	Bundles.Reference("content/templates/results");
}

@if (string.IsNullOrEmpty(Model.OriginalQuery))
{
	<div class="message"><div><span>To search, type something in the search box above.</span></div></div>
}
else
{ 
	<div class="row search header-content">
		<div class="span16">
			<div class="alert-message">
				Search results for @Html.Raw(string.Join(" and ", Model.QueryParts.Select(x => "<span class='hilite'>" + x + "</span>"))) (@String.Format("{0:N2} seconds",(ViewBag.Duration as Double?)))
			</div>
		</div>
	</div>
	<div class="row search">
		<div class="span5 module primary-content" id="uxVerses"></div>
		<div class="span6 module primary-content" id="uxGlossary"></div>
		<div class="span5 module primary-content" id="uxFiles"></div>
	</div>
}

@section scripts
{
	<script type="text/javascript">
		$(function ()
		{
			var Search = new App.Search(@Html.Raw(Json.Encode(Model.QueryParts)), @Html.Raw(Json.Encode(Model.MatchingTerms)), @Html.Raw(Json.Encode(Model.MatchingFiles)), @Html.Raw(Json.Encode(Model.MatchingVerses)));
		});
	</script>
}



