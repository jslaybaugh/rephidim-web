@model SearchView
@{
	ViewBag.Title = "Search";
	ViewBag.NavHome = true;
	ViewBag.SearchQuery = Model.OriginalQuery;
	Bundles.Reference("content/templates/files");
}

@functions
{
	private string PrintFileSize(Int64 size)
	{
		if (size < 1024) return "< 1 KB";
		else if (size < 1024 * 1000) return string.Format("{0} KB", Math.Ceiling(size / 1000.0));
		else return string.Format("{0:N1} MB", size / (1000.0 * 1024));

	}
}

<div class="row search" style="margin-bottom:20px;" id="uxHeader">
	<div class="span16 module">
		<h2>Search Results for @Html.Raw(string.Join(" and ", Model.QueryParts.Select(x => "<span class='hilite'>" + x + "</span>")))</h2>
	</div>
</div>
<div class="row search">
	<div class="span8 module scrollable" id="uxFiles">
		<h2 class="span8">File Results</h2>
		@if (Model.MatchingFiles != null && Model.MatchingFiles.Count() > 0)
		{
			<ul class="files">
				@foreach (var item in Model.MatchingFiles)
				{
					<li>
						<a href="#" class="file-name" title="@item.Name">@Sprite.Image("~/App_Sprites/icon_text.png") @item.Name</a> 
						@if (item.LastWriteTime.Subtract(DateTime.Now).Duration().TotalDays < 8) {<span class="label success">New</span>}
						<span class="file-info right"><b>Size:</b> @PrintFileSize(item.Length), <b>Loaded:</b> @string.Format("{0: M/d/yyyy h:mm tt}", item.LastWriteTime)</span>
					</li>
				}
			</ul>
		}
		else
		{ 
			<div class="message"><div><span>No files match your search parameters.</span></div></div>
		}
	</div>
	<div class="span8 module scrollable" id="uxGlossary">
		<h2 class="span8">Glossary Results</h2>
		@if (Model.MatchingTerms != null && Model.MatchingTerms.Count() > 0)
		{
			<ul class="unstyled">
				@foreach (var item in Model.MatchingTerms)
				{
					<li><a title="Go to full definition for @item.Term" href="@(Url.Action<GlossaryController>(x => x.Term(item.Id)))">@item.Term</a><br />@Html.Raw(item.Definition)<br /><br /></li>
				}
			</ul>
		}
		else
		{ 
			<div class="message"><div><span>No glossary terms match your search parameters.</span></div></div>
		}
	</div>
</div>

@section templates
{
	@Bundles.RenderHtmlTemplates()
}
@section scripts
{
	<script type="text/javascript">
		$(function ()
		{
			var Search = new App.Search(@Html.Raw(Json.Encode(Model.OriginalQuery ?? "")));
		});
	</script>
}



