@model SearchView
@{
	ViewBag.Title = "Search";
	ViewBag.NavHome = true;
	ViewBag.SearchQuery = Model.OriginalQuery;
	Bundles.Reference("content/templates/glossary");
	Bundles.Reference("content/templates/files");
}

@if (string.IsNullOrEmpty(Model.OriginalQuery))
{
	<div class="message"><div><span>To search, type something in the search box above.</span></div></div>
}
else
{ 
	<div class="row search" id="uxHeader">
		<div class="span16 module">
			<h2 style="margin:10px;">Search for @Html.Raw(string.Join(" and ", Model.QueryParts.Select(x => "<span class='hilite'>" + x + "</span>")))</h2>
		</div>
		<h2 class="span8">Glossary Results (@(Model.MatchingTerms != null ? Model.MatchingTerms.Count() : 0))</h2>
		<h2 class="span8">File Results (@(Model.MatchingFiles != null ? Model.MatchingFiles.Count() : 0))</h2>
	</div>
	<div class="row search">
		<div class="span8 module scrollable" id="uxGlossary"></div>
		<div class="span8 module scrollable" id="uxFiles"></div>
	</div>
}


@section templates
{
	@Bundles.RenderHtmlTemplates()
}
@section scripts
{
	<script type="text/javascript">
		$(function ()
		{
			var Search = new App.Search(@Html.Raw(Json.Encode(Model.QueryParts)), @Html.Raw(Json.Encode(Model.MatchingTerms)), @Html.Raw(Json.Encode(Model.MatchingFiles)));
		});
	</script>
}



