@model HomeView
@using System.Text.RegularExpressions;
@{
	ViewBag.Title = "Home";
	ViewBag.NavHome = true;
}

<div class="row header-content">
	<div class="span12">
		@if (Model.Messages != null && Model.Messages.Count() > 0)
		{ 
			foreach (var msg in Model.Messages)
			{
				<div class="alert-message @msg.Style.ToLowerInvariant()">@Html.Raw(msg.Value)</div>
			}
		}
	</div>
</div>
<div class="row">
	<div class="span4 module primary-content" id="uxVerses"></div>
	<div class="span4 module primary-content" id="uxGlossary"></div>
	<div class="span4 module primary-content" id="uxFiles">
		<h1>Recent Files (@(Model.RecentFiles != null && Model.RecentFiles.Count() > 0 ? Model.RecentFiles.Count() : 0))</h1>
		<div class="scrollable">
			@if (Model.RecentFiles != null && Model.RecentFiles.Count() > 0)
			{
				<ul class="unstyled lines">
					@foreach (var file in Model.RecentFiles)
					{
						<li>
							<a class="file-name" data-toggle="modal" data-target="#uxModal" href="@(Url.Action<FilesController>(x => x.Options(file.Path)))">@file.Name</a>
							@if (file.IsNew) { <span class="label label-success">New: @string.Format("{0:M/d/yy h:mm tt}", file.DateCreated)</span> }
							@if (!file.IsNew && file.IsModified) { <span class="label label-success">Modified: @string.Format("{0:M/d/yy h:mm tt}", file.DateModified)</span> }<br />
							<span class="small-info">
								<b>Path: </b> <a href="@(Url.Action<FilesController>(x=>x.Browse(Regex.Replace(file.Path, file.Name + "." + file.Extension, "", RegexOptions.IgnoreCase))))">@Regex.Replace(file.Path, file.Name + "." + file.Extension, "", RegexOptions.IgnoreCase)</a><br />
								<b>Size:</b> @file.Size, <b>Loaded:</b> @string.Format("{0:M/d/yy h:mm tt}", file.DateModified)</span>
						</li>
					}
				</ul>
			}
			else
			{
				<div class='message'><div><span>No files.</span></div></div>
			}
		</div>
	</div>
</div>
@Html.Partial("~/Views/Files/_Dialog.cshtml")

@section scripts
{
	<script type="text/javascript">
		$(function ()
		{
			var Home = new App.Home(@Html.Raw(Json.Encode(Model.RecentTerms)), @Html.Raw(Json.Encode(Model.RecentFiles)), @Html.Raw(Json.Encode(Model.RecentVerses)));
		});
	</script>
}



